<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dream eShop - Virtual Shopping with $1B Balance</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <div class="navbar">
            <div class="logo">
                <h1>Dream eShop</h1>
            </div>
            <div class="nav-links">
                <a href="index.html" class="active">Home</a>
                <a href="cart.html">Cart</a>
                <a href="orders.html">Orders</a>
                <a href="bank.html">Bank</a>
                
            </div>
            <div class="user-info">
                <span id="balance">Balance: $1,000,000,000</span>
                <input type="text" id="username" placeholder="Enter username" value="User1">
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <h2>Featured Products</h2>
            <div class="product-grid" id="product-grid">
                <!-- Products will be loaded here dynamically -->
            </div>
        </div>
    </main>

    <footer>
        <p>&copy; 2023 Dream eShop - Virtual Shopping Experience | All purchases are simulated!</p>
    </footer>

    <script src="script.js"></script>
    <script>
        // Initialize data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeData();
            updateBalanceDisplay();
            displayProducts();
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order History - Dream eShop</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <div class="navbar">
            <div class="logo">
                <h1>Dream eShop</h1>
            </div>
            <div class="nav-links">
                <a href="index.html">Home</a>
                <a href="cart.html">Cart</a>
                <a href="orders.html" class="active">Orders</a>
                <a href="bank.html">Bank</a>
                
            </div>
            <div class="user-info">
                <span id="balance">Balance: $1,000,000,000</span>
                <input type="text" id="username" placeholder="Enter username" value="User1">
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <h2>Order History</h2>
            <div class="order-history">
                <div id="orders-container">
                    <!-- Order history will be loaded here dynamically -->
                </div>
            </div>
        </div>
    </main>

    <footer>
        <p>&copy; 2023 Dream eShop - Virtual Shopping Experience | All purchases are simulated!</p>
    </footer>

    <script src="script.js"></script>
    <script>
        // Initialize data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeData();
            updateBalanceDisplay();
            displayOrders();
        });
    </script>
</body>
</html>
# Dream eShop - Virtual Shopping with $1B Balance

A fun, fully simulated e-commerce website where each user starts with a virtual balance of $1,000,000,000 ($1B). Users can browse products, add items to cart, checkout using virtual balance, and view order history.

## Features

1. **Virtual Balance**
   - Each user starts with $1B
   - Buying products deducts from balance
   - Display remaining balance in header and checkout

2. **Products**
   - Add, edit, delete products (admin panel)
   - Product info: name, price, description, image URL
   - Display products in a grid with price and "Add to Cart" button

3. **Cart**
   - Users can add/remove products
   - Shows total price
   - Checkout subtracts total from virtual balance
   - Orders stored in localStorage

4. **Checkout**
   - Validate if user has enough virtual balance
   - Show confirmation message after purchase
   - Update balance and order history
   - Animated confetti on successful purchase

5. **Order History**
   - List past orders with product names, total, and date

6. **Admin Panel**
   - View all products and orders
   - Add/edit/delete products
   - Show total virtual sales
   - Simple interface, no real authentication needed

## How to Use

1. Open `index.html` in your web browser
2. Enter a username in the top right corner (default is "User1")
3. Browse products and add items to your cart
4. Go to the Cart page to review your items
5. Proceed to checkout to complete your purchase
6. View your order history in the Orders page
7. Access the Admin panel to manage products (use "admin" as username for admin features)

## Pages

- `index.html` - Homepage with product listing
- `cart.html` - Shopping cart
- `orders.html` - Order history
- `admin.html` - Main admin panel
- `admin-panel.html` - Product management panel

## Data Storage

All data is stored in the browser's localStorage:
- Products
- User carts
- Order history
- User balances
- Total sales

## Fun Features

- Animated confetti when purchase completes
- Alert if balance is insufficient
- Simulate multiple users by storing balances separately
- Responsive design for desktop and mobile

## Technologies Used

- HTML5
- CSS3 (Blue, White, and Yellow color scheme)
- Vanilla JavaScript
- localStorage for data persistence

Enjoy your virtual shopping experience with $1 billion to spend at Dream eShop!Enjoy your virtual shopping experience with $1 billion to spend at Dream eShop!
// FunAmazon - Virtual Shopping with $1B Balance
// Main JavaScript File

// Initial data - these are permanent products that will always be available
const initialProducts = [
    {
        id: 1,
        name: "Premium Headphones",
        price: 199.99,
        description: "Noise-cancelling wireless headphones with premium sound quality",
        image: "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?auto=format&fit=crop&w=600&h=400"
    },
    {
        id: 2,
        name: "Smart Watch",
        price: 299.99,
        description: "Fitness tracker with heart rate monitor and GPS",
        image: "https://images.unsplash.com/photo-1523275335684-37898b6baf30?auto=format&fit=crop&w=600&h=400"
    },
    {
        id: 3,
        name: "Gaming Laptop",
        price: 1299.99,
        description: "High-performance laptop for gaming and productivity",
        image: "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?auto=format&fit=crop&w=600&h=400"
    },
    {
        id: 4,
        name: "Smartphone Pro",
        price: 899.99,
        description: "Latest model smartphone with advanced camera system",
        image: "https://images.unsplash.com/photo-1595941069915-4ebc5197c14a?auto=format&fit=crop&w=600&h=400"
    },
    {
        id: 5,
        name: "Bluetooth Speaker",
        price: 79.99,
        description: "Portable waterproof speaker with 360Â° sound",
        image: "https://images.unsplash.com/photo-1608043152269-423dbba4e7e1?auto=format&fit=crop&w=600&h=400"
    },
    {
        id: 6,
        name: "Coffee Maker",
        price: 149.99,
        description: "Programmable coffee maker with thermal carafe",
        image: "https://images.unsplash.com/photo-1571330735066-03aaa9429d89?auto=format&fit=crop&w=600&h=400"
    }
];

// Initialize data in localStorage if not present
function initializeData() {
    console.log('Initializing data...');
    
    // Only initialize products if they don't exist
    if (!localStorage.getItem('products')) {
        console.log('No products found, initializing with default products');
        localStorage.setItem('products', JSON.stringify(initialProducts));
    } else {
        console.log('Products already exist in localStorage');
        const existingProducts = JSON.parse(localStorage.getItem('products'));
        console.log('Existing products count:', existingProducts.length);
    }
    
    // Initialize dynamic products if not present
    if (!localStorage.getItem('dynamicProducts')) {
        localStorage.setItem('dynamicProducts', JSON.stringify([]));
    }
    
    if (!localStorage.getItem('orders')) {
        localStorage.setItem('orders', JSON.stringify([]));
    }
    
    if (!localStorage.getItem('balances')) {
        // Initialize with default $1B balance for all users
        const balances = {
            "User1": 1000000000,
            "User2": 1000000000,
            "admin": 1000000000
        };
        localStorage.setItem('balances', JSON.stringify(balances));
    }
    
    // Initialize bank data if not present
    if (!localStorage.getItem('bankAccounts')) {
        localStorage.setItem('bankAccounts', JSON.stringify({}));
    }
    
    if (!localStorage.getItem('totalSales')) {
        localStorage.setItem('totalSales', JSON.stringify(0));
    }
    
    console.log('Data initialization complete');
}

// Get current user
function getCurrentUser() {
    return document.getElementById('username').value || 'User1';
}

// Get user balance
function getUserBalance() {
    const balances = JSON.parse(localStorage.getItem('balances') || '{}');
    const user = getCurrentUser();
    return balances[user] || 1000000000;
}

// Update user balance
function updateUserBalance(newBalance) {
    const balances = JSON.parse(localStorage.getItem('balances') || '{}');
    const user = getCurrentUser();
    balances[user] = newBalance;
    localStorage.setItem('balances', JSON.stringify(balances));
    updateBalanceDisplay();
}

// Update balance display
function updateBalanceDisplay() {
    const balance = getUserBalance();
    document.getElementById('balance').textContent = `Balance: $${balance.toLocaleString()}`;
}

// Get all products (combines initial products with dynamically added ones)
function getProducts() {
    try {
        // Get initial products
        const initial = [...initialProducts];
        
        // Get dynamically added products
        const dynamic = JSON.parse(localStorage.getItem('dynamicProducts') || '[]');
        
        // Combine both arrays
        const allProducts = [...initial, ...dynamic];
        
        return allProducts;
    } catch (e) {
        console.error('Error loading products:', e);
        return [...initialProducts];
    }
}

// Save dynamically added products to localStorage
function saveDynamicProducts(products) {
    try {
        localStorage.setItem('dynamicProducts', JSON.stringify(products));
        console.log('Dynamic products saved successfully:', products.length, 'items');
    } catch (e) {
        console.error('Error saving dynamic products to localStorage:', e);
        alert('Failed to save product. Storage may be full.');
    }
}

// Bank Functions
function getBankAccount() {
    const bankAccounts = JSON.parse(localStorage.getItem('bankAccounts') || '{}');
    const user = getCurrentUser();
    return bankAccounts[user] || { balance: 0, lastPayment: null, interestActive: false };
}

function saveBankAccount(account) {
    const bankAccounts = JSON.parse(localStorage.getItem('bankAccounts') || '{}');
    const user = getCurrentUser();
    bankAccounts[user] = account;
    localStorage.setItem('bankAccounts', JSON.stringify(bankAccounts));
}

function displayBankInfo() {
    const bankAccount = getBankAccount();
    const bankBalanceElement = document.getElementById('bank-balance');
    const lastPaymentElement = document.getElementById('last-payment');
    const interestStatusElement = document.getElementById('interest-status');
    const interestToggleElement = document.getElementById('interest-toggle');
    
    if (bankBalanceElement) {
        bankBalanceElement.textContent = bankAccount.balance.toFixed(2);
    }
    
    if (lastPaymentElement) {
        lastPaymentElement.textContent = bankAccount.lastPayment ? 
            new Date(bankAccount.lastPayment).toLocaleString() : 'Never';
    }
    
    if (interestStatusElement) {
        if (bankAccount.interestActive) {
            interestStatusElement.textContent = 'Interest earning is currently active.';
            interestStatusElement.style.color = 'green';
        } else {
            interestStatusElement.textContent = 'Interest earning is currently inactive.';
            interestStatusElement.style.color = 'red';
        }
    }
    
    if (interestToggleElement) {
        interestToggleElement.textContent = bankAccount.interestActive ? 
            'Stop Earning Interest' : 'Start Earning Interest';
    }
}

function depositMoney() {
    const amountInput = document.getElementById('deposit-amount');
    const amount = parseFloat(amountInput.value);
    
    if (isNaN(amount) || amount <= 0) {
        alert('Please enter a valid deposit amount.');
        return;
    }
    
    const userBalance = getUserBalance();
    if (amount > userBalance) {
        alert('Insufficient funds for deposit.');
        return;
    }
    
    // Update user balance
    updateUserBalance(userBalance - amount);
    
    // Update bank account
    const bankAccount = getBankAccount();
    bankAccount.balance += amount;
    saveBankAccount(bankAccount);
    
    // Clear input
    amountInput.value = '';
    
    // Update display
    displayBankInfo();
    
    alert(`Successfully deposited $${amount.toFixed(2)} into your bank account.`);
}

function withdrawMoney() {
    const amountInput = document.getElementById('withdraw-amount');
    const amount = parseFloat(amountInput.value);
    
    if (isNaN(amount) || amount <= 0) {
        alert('Please enter a valid withdrawal amount.');
        return;
    }
    
    const bankAccount = getBankAccount();
    if (amount > bankAccount.balance) {
        alert('Insufficient funds in bank account.');
        return;
    }
    
    // Update bank account
    bankAccount.balance -= amount;
    saveBankAccount(bankAccount);
    
    // Update user balance
    const userBalance = getUserBalance();
    updateUserBalance(userBalance + amount);
    
    // Clear input
    amountInput.value = '';
    
    // Update display
    displayBankInfo();
    
    alert(`Successfully withdrew $${amount.toFixed(2)} from your bank account.`);
}

function toggleInterest() {
    const bankAccount = getBankAccount();
    bankAccount.interestActive = !bankAccount.interestActive;
    saveBankAccount(bankAccount);
    
    if (bankAccount.interestActive) {
        startInterestTimer();
        alert('Interest earning has been activated. You will earn $60 every 30 seconds.');
    } else {
        stopInterestTimer();
        alert('Interest earning has been deactivated.');
    }
    
    displayBankInfo();
}

// Timer for interest payments
let interestInterval;

function startInterestTimer() {
    // Clear any existing interval
    stopInterestTimer();
    
    // Start new interval (30 seconds)
    interestInterval = setInterval(() => {
        const bankAccount = getBankAccount();
        if (bankAccount.interestActive && bankAccount.balance > 0) {
            bankAccount.balance += 60;
            bankAccount.lastPayment = new Date().toISOString();
            saveBankAccount(bankAccount);
            
            // Update display if on bank page
            if (document.getElementById('bank-balance')) {
                displayBankInfo();
            }
            
            console.log(`Interest payment of $60 added. New balance: $${bankAccount.balance.toFixed(2)}`);
        }
    }, 30000); // 30 seconds
}

function stopInterestTimer() {
    if (interestInterval) {
        clearInterval(interestInterval);
        interestInterval = null;
    }
}

// Get cart from localStorage
function getCart() {
    const user = getCurrentUser();
    const carts = JSON.parse(localStorage.getItem('carts') || '{}');
    return carts[user] || [];
}

// Save cart to localStorage
function saveCart(cart) {
    const user = getCurrentUser();
    const carts = JSON.parse(localStorage.getItem('carts') || '{}');
    carts[user] = cart;
    localStorage.setItem('carts', JSON.stringify(carts));
}

// Get orders from localStorage
function getOrders() {
    return JSON.parse(localStorage.getItem('orders') || '[]');
}

// Save orders to localStorage
function saveOrders(orders) {
    localStorage.setItem('orders', JSON.stringify(orders));
}

// Get total sales
function getTotalSales() {
    return parseFloat(localStorage.getItem('totalSales') || '0');
}

// Update total sales
function updateTotalSales(amount) {
    const currentSales = getTotalSales();
    localStorage.setItem('totalSales', JSON.stringify(currentSales + amount));
}

// Display products on homepage
function displayProducts() {
    const products = getProducts();
    const productGrid = document.getElementById('product-grid');
    
    if (!productGrid) return;
    
    if (products.length === 0) {
        productGrid.innerHTML = '<p>No products available.</p>';
        return;
    }
    
    productGrid.innerHTML = products.map(product => `
        <div class="product-card">
            <img src="${product.image}" alt="${product.name}" class="product-image">
            <div class="product-info">
                <h3>${product.name}</h3>
                <p>${product.description}</p>
                <div class="product-price">$${product.price.toFixed(2)}</div>
                <button class="btn btn-block" onclick="addToCart(${product.id})">Add to Cart</button>
            </div>
        </div>
    `).join('');
}

// Add item to cart
function addToCart(productId) {
    const products = getProducts();
    const product = products.find(p => p.id === productId);
    
    if (!product) {
        alert('Product not found!');
        return;
    }
    
    let cart = getCart();
    const existingItem = cart.find(item => item.productId === productId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            productId: product.id,
            name: product.name,
            price: product.price,
            image: product.image,
            quantity: 1
        });
    }
    
    saveCart(cart);
    alert(`${product.name} added to cart!`);
}

// Display cart items
function displayCart() {
    const cart = getCart();
    const cartItems = document.getElementById('cart-items');
    const cartTotal = document.getElementById('cart-total');
    
    if (!cartItems) return;
    
    if (cart.length === 0) {
        cartItems.innerHTML = '<p>Your cart is empty.</p>';
        if (cartTotal) cartTotal.textContent = '0.00';
        return;
    }
    
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    cartItems.innerHTML = cart.map(item => `
        <div class="cart-item">
            <div class="item-details">
                <img src="${item.image}" alt="${item.name}" class="item-image">
                <div class="item-info">
                    <h3>${item.name}</h3>
                    <div class="item-price">$${item.price.toFixed(2)}</div>
                </div>
            </div>
            <div class="quantity-controls">
                <button class="quantity-btn" onclick="updateQuantity(${item.productId}, -1)">-</button>
                <span class="quantity">${item.quantity}</span>
                <button class="quantity-btn" onclick="updateQuantity(${item.productId}, 1)">+</button>
            </div>
            <button class="btn btn-danger" onclick="removeFromCart(${item.productId})">Remove</button>
        </div>
    `).join('');
    
    if (cartTotal) {
        cartTotal.textContent = total.toFixed(2);
    }
    
    // Update the checkout button
    const checkoutBtn = document.getElementById('checkout-btn');
    if (checkoutBtn) {
        checkoutBtn.onclick = () => checkout(total);
    }
}

// Update item quantity in cart
function updateQuantity(productId, change) {
    let cart = getCart();
    const item = cart.find(item => item.productId === productId);
    
    if (item) {
        item.quantity += change;
        
        if (item.quantity <= 0) {
            cart = cart.filter(item => item.productId !== productId);
        }
        
        saveCart(cart);
        displayCart();
    }
}

// Remove item from cart
function removeFromCart(productId) {
    let cart = getCart();
    cart = cart.filter(item => item.productId !== productId);
    saveCart(cart);
    displayCart();
}

// Checkout function
function checkout(total) {
    const balance = getUserBalance();
    
    if (total > balance) {
        alert('Insufficient balance! Please remove some items from your cart.');
        return;
    }
    
    // Deduct from balance
    updateUserBalance(balance - total);
    
    // Add to orders
    const cart = getCart();
    const orders = getOrders();
    
    const order = {
        id: Date.now(),
        userId: getCurrentUser(),
        items: cart,
        total: total,
        date: new Date().toLocaleString()
    };
    
    orders.push(order);
    saveOrders(orders);
    
    // Update total sales
    updateTotalSales(total);
    
    // Clear cart
    saveCart([]);
    
    // Show confetti animation
    showConfetti();
    
    // Show success message
    alert(`Order placed successfully! Total: $${total.toFixed(2)}`);
    
    // Refresh cart display
    displayCart();
}

// Show confetti animation
function showConfetti() {
    const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
    
    for (let i = 0; i < 100; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = Math.random() * 100 + 'vw';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.width = Math.random() * 10 + 5 + 'px';
        confetti.style.height = confetti.style.width;
        confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';
        
        document.body.appendChild(confetti);
        
        // Remove confetti after animation
        setTimeout(() => {
            confetti.remove();
        }, 5000);
    }
}

// Display order history
function displayOrders() {
    const orders = getOrders();
    const user = getCurrentUser();
    const userOrders = orders.filter(order => order.userId === user);
    const ordersContainer = document.getElementById('orders-container');
    
    if (!ordersContainer) return;
    
    if (userOrders.length === 0) {
        ordersContainer.innerHTML = '<p>No orders found.</p>';
        return;
    }
    
    ordersContainer.innerHTML = userOrders.map(order => `
        <div class="order-item">
            <div class="order-header">
                <div><strong>Order #${order.id}</strong></div>
                <div class="order-date">${order.date}</div>
            </div>
            <div class="order-items">
                ${order.items.map(item => `
                    <div>${item.name} x ${item.quantity} - $${(item.price * item.quantity).toFixed(2)}</div>
                `).join('')}
            </div>
            <div class="order-total">Total: $${order.total.toFixed(2)}</div>
        </div>
    `).join('');
}

// Display total sales (for admin page)
function displayTotalSales() {
    const totalSales = getTotalSales();
    const salesElement = document.getElementById('total-sales');
    
    if (salesElement) {
        salesElement.textContent = `$${totalSales.toFixed(2)}`;
    }
}

// Admin functions
function displayAdminProducts() {
    const products = getProducts();
    const productsTable = document.getElementById('products-table');
    
    if (!productsTable) return;
    
    if (products.length === 0) {
        productsTable.innerHTML = '<tr><td colspan="5">No products available.</td></tr>';
        return;
    }
    
    productsTable.innerHTML = products.map(product => `
        <tr>
            <td>${product.id}</td>
            <td>${product.name}</td>
            <td>$${product.price.toFixed(2)}</td>
            <td><img src="${product.image}" alt="${product.name}" onerror="this.src='https://images.unsplash.com/photo-1505740420928-5e560c06d30e?auto=format&fit=crop&w=600&h=400'" style="width: 50px; height: 50px; object-fit: cover;"></td>
            <td>
                <button class="btn" onclick="editProduct(${product.id})">Edit</button>
                <button class="btn btn-danger" onclick="deleteProduct(${product.id})">Delete</button>
            </td>
        </tr>
    `).join('');
}

function addProduct() {
    const name = document.getElementById('product-name').value;
    const price = parseFloat(document.getElementById('product-price').value);
    const description = document.getElementById('product-description').value;
    const image = document.getElementById('product-image').value;
    const imageFile = document.getElementById('product-image-file').files[0];
    
    if (!name || isNaN(price) || !description) {
        alert('Please fill in all required fields (Name, Price, Description).');
        return;
    }
    
    // Handle image upload - either file or URL
    if (imageFile) {
        const reader = new FileReader();
        reader.onload = function(e) {
            finishAddingProduct(name, price, description, e.target.result);
        };
        reader.readAsDataURL(imageFile);
    } else if (image) {
        finishAddingProduct(name, price, description, image);
    } else {
        // Default image if none provided
        finishAddingProduct(name, price, description, 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?auto=format&fit=crop&w=600&h=400');
    }
}

function finishAddingProduct(name, price, description, imageUrl) {
    // Get existing dynamic products
    let dynamicProducts = JSON.parse(localStorage.getItem('dynamicProducts') || '[]');
    
    const newProduct = {
        id: Date.now(), // Use timestamp as ID for dynamic products
        name,
        price,
        description,
        image: imageUrl
    };
    
    dynamicProducts.push(newProduct);
    saveDynamicProducts(dynamicProducts);
    
    // Reset form
    document.getElementById('product-form').reset();
    
    // Refresh display
    displayAdminProducts();
    
    alert('Product added successfully! This product will now appear on all devices.');
}

function editProduct(productId) {
    // Check if this is an initial product (can't be edited)
    const isInitialProduct = initialProducts.some(p => p.id === productId);
    if (isInitialProduct) {
        alert('This is a permanent product and cannot be edited. You can only edit products you have added.');
        return;
    }
    
    // Get dynamic products
    let dynamicProducts = JSON.parse(localStorage.getItem('dynamicProducts') || '[]');
    const product = dynamicProducts.find(p => p.id === productId);
    
    if (!product) {
        alert('Product not found!');
        return;
    }
    
    // Fill form with product data
    document.getElementById('product-name').value = product.name;
    document.getElementById('product-price').value = product.price;
    document.getElementById('product-description').value = product.description;
    document.getElementById('product-image').value = product.image;
    
    // Change form submit action
    const form = document.getElementById('product-form');
    form.onsubmit = (e) => {
        e.preventDefault();
        updateProduct(productId);
    };
    
    // Change button text
    document.getElementById('form-title').textContent = 'Edit Product';
    document.getElementById('form-button').textContent = 'Update Product';
}

function updateProduct(productId) {
    const name = document.getElementById('product-name').value;
    const price = parseFloat(document.getElementById('product-price').value);
    const description = document.getElementById('product-description').value;
    const image = document.getElementById('product-image').value;
    const imageFile = document.getElementById('product-image-file').files[0];
    
    if (!name || isNaN(price) || !description) {
        alert('Please fill in all required fields (Name, Price, Description).');
        return;
    }
    
    // Handle image upload
    if (imageFile) {
        const reader = new FileReader();
        reader.onload = function(e) {
            finishUpdatingProduct(productId, name, price, description, e.target.result);
        };
        reader.readAsDataURL(imageFile);
    } else {
        finishUpdatingProduct(productId, name, price, description, image);
    }
}

function finishUpdatingProduct(productId, name, price, description, imageUrl) {
    // Get dynamic products
    let dynamicProducts = JSON.parse(localStorage.getItem('dynamicProducts') || '[]');
    const productIndex = dynamicProducts.findIndex(p => p.id === productId);
    
    if (productIndex === -1) {
        alert('Product not found!');
        return;
    }
    
    dynamicProducts[productIndex] = {
        id: productId,
        name,
        price,
        description,
        image: imageUrl
    };
    
    saveDynamicProducts(dynamicProducts);
    
    // Reset form
    document.getElementById('product-form').reset();
    
    // Reset form submit action
    const form = document.getElementById('product-form');
    form.onsubmit = (e) => {
        e.preventDefault();
        addProduct();
    };
    
    // Reset button text
    document.getElementById('form-title').textContent = 'Add New Product';
    document.getElementById('form-button').textContent = 'Add Product';
    
    // Refresh display
    displayAdminProducts();
    
    alert('Product updated successfully!');
}

function deleteProduct(productId) {
    // Check if this is an initial product (can't be deleted)
    const isInitialProduct = initialProducts.some(p => p.id === productId);
    if (isInitialProduct) {
        alert('This is a permanent product and cannot be deleted.');
        return;
    }
    
    if (!confirm('Are you sure you want to delete this product?')) {
        return;
    }
    
    // Get dynamic products
    let dynamicProducts = JSON.parse(localStorage.getItem('dynamicProducts') || '[]');
    dynamicProducts = dynamicProducts.filter(p => p.id !== productId);
    saveDynamicProducts(dynamicProducts);
    
    displayAdminProducts();
    
    alert('Product deleted successfully!');
}

// Export products to JSON file (includes both initial and dynamic products)
function exportProducts() {
    const products = getProducts();
    const dataStr = JSON.stringify(products, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = 'dream-eshop-products.json';
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
}

// Import products from JSON file (adds to dynamic products)
function importProducts(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const products = JSON.parse(e.target.result);
            if (Array.isArray(products)) {
                // Filter out any products that might conflict with initial products
                const dynamicProducts = products.filter(product => 
                    !initialProducts.some(initial => initial.id === product.id)
                );
                
                // Save to dynamic products
                saveDynamicProducts(dynamicProducts);
                displayAdminProducts();
                alert(`Successfully imported ${dynamicProducts.length} products!`);
            } else {
                alert('Invalid file format. Please select a valid products JSON file.');
            }
        } catch (error) {
            alert('Error importing products: ' + error.message);
        }
    };
    reader.readAsText(file);
}

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    initializeData();
    updateBalanceDisplay();
    
    // Homepage
    if (document.getElementById('product-grid')) {
        displayProducts();
    }
    
    // Cart page
    if (document.getElementById('cart-items')) {
        displayCart();
    }
    
    // Orders page
    if (document.getElementById('orders-container')) {
        displayOrders();
    }
    
    // Admin page
    if (document.getElementById('total-sales')) {
        displayTotalSales();
    }
    
    // Bank page
    if (document.getElementById('bank-balance')) {
        displayBankInfo();
        const bankAccount = getBankAccount();
        if (bankAccount.interestActive) {
            startInterestTimer();
        }
    }
    
    // Update balance when username changes
    const usernameInput = document.getElementById('username');
    if (usernameInput) {
        usernameInput.addEventListener('change', updateBalanceDisplay);
    }
});

// Make functions available globally
window.addToCart = addToCart;
window.removeFromCart = removeFromCart;
window.updateQuantity = updateQuantity;
window.checkout = checkout;
window.updateBalanceDisplay = updateBalanceDisplay;
window.exportProducts = exportProducts;
window.importProducts = importProducts;
window.depositMoney = depositMoney;
window.withdrawMoney = withdrawMoney;
window.toggleInterest = toggleInterest;
window.displayBankInfo = displayBankInfo;
/* Global Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f7f7f7;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

/* Header Styles */
header {
    background-color: #1e3a8a; /* Dark blue */
    color: white;
    padding: 15px 0;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.logo h1 {
    color: #fbbf24; /* Yellow */
    font-size: 1.8rem;
}

.nav-links a {
    color: white;
    text-decoration: none;
    margin: 0 15px;
    padding: 8px 12px;
    border-radius: 4px;
    transition: background-color 0.3s;
}

.nav-links a:hover, .nav-links a.active {
    background-color: #fbbf24; /* Yellow */
    color: #1e3a8a; /* Dark blue */
}

.user-info {
    display: flex;
    align-items: center;
    gap: 15px;
}

.user-info #balance {
    background-color: #fbbf24; /* Yellow */
    color: #1e3a8a; /* Dark blue */
    padding: 8px 12px;
    border-radius: 4px;
    font-weight: bold;
}

.user-info #username {
    padding: 8px;
    border-radius: 4px;
    border: none;
}

/* Main Content */
main {
    min-height: calc(100vh - 140px);
}

h2 {
    margin-bottom: 20px;
    color: #1e3a8a; /* Dark blue */
}

/* Product Grid */
.product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
}

.product-card {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.3s, box-shadow 0.3s;
}

.product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}

.product-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.product-info {
    padding: 15px;
}

.product-info h3 {
    margin-bottom: 10px;
    color: #1e3a8a; /* Dark blue */
}

.product-info p {
    color: #666;
    margin-bottom: 15px;
    font-size: 0.9rem;
}

.product-price {
    font-size: 1.2rem;
    font-weight: bold;
    color: #1e3a8a; /* Dark blue */
    margin-bottom: 15px;
}

.btn {
    display: inline-block;
    background-color: #1e3a8a; /* Dark blue */
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    text-align: center;
    transition: background-color 0.3s;
}

.btn:hover {
    background-color: #2563eb; /* Lighter blue */
}

.btn-block {
    display: block;
    width: 100%;
}

.btn-danger {
    background-color: #dc2626; /* Red */
}

.btn-danger:hover {
    background-color: #b91c1c; /* Darker red */
}

.btn-success {
    background-color: #16a34a; /* Green */
}

.btn-success:hover {
    background-color: #15803d; /* Darker green */
}

/* Cart Page */
.cart-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background: white;
    border-radius: 8px;
    margin-bottom: 15px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.item-details {
    display: flex;
    align-items: center;
    gap: 15px;
}

.item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
}

.item-info h3 {
    margin-bottom: 5px;
}

.item-price {
    font-weight: bold;
    color: #1e3a8a; /* Dark blue */
}

.quantity-controls {
    display: flex;
    align-items: center;
    gap: 10px;
}

.quantity-btn {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    border: none;
    background-color: #eee;
    cursor: pointer;
    font-weight: bold;
}

.quantity {
    min-width: 30px;
    text-align: center;
}

.cart-total {
    background: white;
    padding: 20px;
    border-radius: 8px;
    margin-top: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    text-align: right;
}

.cart-total h3 {
    font-size: 1.5rem;
    color: #1e3a8a; /* Dark blue */
}

/* Orders Page */
.order-history {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.order-item {
    padding: 15px;
    border-bottom: 1px solid #eee;
}

.order-item:last-child {
    border-bottom: none;
}

.order-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.order-date {
    color: #666;
}

.order-items {
    margin: 10px 0;
}

.order-total {
    font-weight: bold;
    color: #1e3a8a; /* Dark blue */
}

/* Admin Panel */
.admin-panel {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input, .form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.form-group input[type="file"] {
    padding: 10px 0;
    border: 2px dashed #ddd;
    border-radius: 4px;
    background-color: #f9f9f9;
    cursor: pointer;
}

.form-group input[type="file"]:hover {
    border-color: #fbbf24; /* Yellow */
    background-color: #fff9f0;
}

.form-group small {
    display: block;
    margin-top: 5px;
    color: #666;
    font-size: 0.85rem;
}

.admin-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.admin-table th, .admin-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
}

.admin-table th {
    background-color: #1e3a8a; /* Dark blue */
    color: white;
}

.admin-table tr:hover {
    background-color: #f5f5f5;
}

.sales-summary {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-top: 20px;
    text-align: center;
}

.sales-summary h3 {
    color: #1e3a8a; /* Dark blue */
    margin-bottom: 15px;
}

.sales-amount {
    font-size: 2rem;
    font-weight: bold;
    color: #fbbf24; /* Yellow */
}

.sales-summary .form-group {
    margin-top: 20px;
    text-align: left;
}

.sales-summary .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.sales-summary .form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
}

.sales-summary .form-group button {
    width: 100%;
}

/* Footer */
footer {
    background-color: #1e3a8a; /* Dark blue */
    color: white;
    text-align: center;
    padding: 20px 0;
    margin-top: 30px;
}

/* Responsive Design */
@media (max-width: 768px) {
    .navbar {
        flex-direction: column;
        gap: 15px;
    }
    
    .product-grid {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
    
    .cart-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
    
    .item-details {
        width: 100%;
    }
    
    .cart-total {
        text-align: center;
    }
}

/* Bank Page Styles */
.bank-panel, .interest-status, .bank-info {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.bank-info h3, .bank-panel h3, .interest-status h3 {
    color: #1e3a8a; /* Dark blue */
    margin-bottom: 15px;
}

.account-info {
    margin-bottom: 20px;
}

.account-info p {
    margin-bottom: 10px;
    font-size: 1.1rem;
}

.bank-actions {
    border-top: 1px solid #eee;
    padding-top: 20px;
}

.interest-status p {
    margin-bottom: 15px;
    font-size: 1.1rem;
}

/* Confetti Animation */
.confetti {
    position: fixed;
    width: 10px;
    height: 10px;
    background-color: #fbbf24; /* Yellow */
    opacity: 0.7;
    animation: fall 5s linear forwards;
}

@keyframes fall {
    to {
        transform: translateY(100vh) rotate(360deg);
        opacity: 0;
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - Dream eShop</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <div class="navbar">
            <div class="logo">
                <h1>Dream eShop</h1>
            </div>
            <div class="nav-links">
                <a href="index.html">Home</a>
                <a href="cart.html">Cart</a>
                <a href="orders.html">Orders</a>
                <a href="bank.html">Bank</a>
                <a href="admin.html" class="active">Admin</a>
            </div>
            <div class="user-info">
                <span id="balance">Balance: $1,000,000,000</span>
                <input type="text" id="username" placeholder="Enter username" value="admin">
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <h2>Admin Panel</h2>
            
            <div class="admin-panel">
                <h3>Admin Access</h3>
                <p>Welcome to the admin panel. You can manage products using the link below.</p>
                <p>Total Virtual Sales: <span class="sales-amount" id="total-sales">$0.00</span></p>
                <a href="admin-panel.html" class="btn">Manage Products</a>
            </div>
        </div>
    </main>

    <footer>
        <p>&copy; 2023 Dream eShop - Virtual Shopping Experience | All purchases are simulated!</p>
    </footer>

    <script src="script.js"></script>
    <script>
        // Initialize data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeData();
            updateBalanceDisplay();
            displayTotalSales();
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management - Dream eShop</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <div class="navbar">
            <div class="logo">
                <h1>Dream eShop</h1>
            </div>
            <div class="nav-links">
                <a href="index.html">Home</a>
                <a href="cart.html">Cart</a>
                <a href="orders.html">Orders</a>
                <a href="admin.html">Admin</a>
                <a href="admin-panel.html" class="active">Product Management</a>
            </div>
            <div class="user-info">
                <span id="balance">Balance: $1,000,000,000</span>
                <input type="text" id="username" placeholder="Enter username" value="admin">
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <h2>Product Management</h2>
            
            <div class="admin-panel">
                <h3 id="form-title">Add New Product</h3>
                <form id="product-form">
                    <div class="form-group">
                        <label for="product-name">Product Name</label>
                        <input type="text" id="product-name" required>
                    </div>
                    <div class="form-group">
                        <label for="product-price">Price ($)</label>
                        <input type="number" id="product-price" step="0.01" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="product-description">Description</label>
                        <textarea id="product-description" rows="3" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="product-image">Image URL</label>
                        <input type="url" id="product-image" required>
                    </div>
                    <div class="form-group">
                        <label for="product-image-file">Or Upload Image</label>
                        <input type="file" id="product-image-file" accept="image/*">
                        <small>Upload an image file (JPG, PNG, GIF) - This will override the URL above</small>
                    </div>
                    <button type="button" class="btn btn-block" id="form-button" onclick="addProduct()">Add Product</button>
                </form>
            </div>
            
            <div class="admin-panel">
                <h3>Current Products</h3>
                <div style="margin-bottom: 15px;">
                    <button class="btn" onclick="exportProducts()">Export Products</button>
                    <button class="btn" onclick="document.getElementById('import-file').click()">Import Products</button>
                    <input type="file" id="import-file" accept=".json" style="display: none;" onchange="importProducts(event)">
                </div>
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Image</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="products-table">
                        <!-- Products will be loaded here dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <footer>
        <p>&copy; 2023 Dream eShop - Virtual Shopping Experience | All purchases are simulated!</p>
    </footer>

    <script src="script.js"></script>
    <script>
        // Additional functions for product management
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize product display
            if (document.getElementById('products-table')) {
                displayAdminProducts();
            }
            
            // Update balance display
            updateBalanceDisplay();
        });
        
        // Make admin functions available globally
        window.addProduct = addProduct;
        window.editProduct = editProduct;
        window.deleteProduct = deleteProduct;
        window.displayAdminProducts = displayAdminProducts;
        window.updateBalanceDisplay = updateBalanceDisplay;
        window.exportProducts = exportProducts;
        window.importProducts = importProducts;
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bank - Dream eShop</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <div class="navbar">
            <div class="logo">
                <h1>Dream eShop</h1>
            </div>
            <div class="nav-links">
                <a href="index.html">Home</a>
                <a href="cart.html">Cart</a>
                <a href="orders.html">Orders</a>
                <a href="bank.html" class="active">Bank</a>
                <a href="admin.html">Admin</a>
            </div>
            <div class="user-info">
                <span id="balance">Balance: $1,000,000,000</span>
                <input type="text" id="username" placeholder="Enter username" value="User1">
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <h2>Dream Bank</h2>
            
            <div class="bank-info">
                <h3>Bank Services</h3>
                <p>Earn $60 every 30 seconds by depositing your money in our secure bank!</p>
            </div>
            
            <div class="bank-panel">
                <h3>Your Bank Account</h3>
                <div class="account-info">
                    <p>Bank Balance: $<span id="bank-balance">0.00</span></p>
                    <p>Interest Rate: $60 per 30 seconds</p>
                    <p>Last Interest Payment: <span id="last-payment">Never</span></p>
                </div>
                
                <div class="bank-actions">
                    <div class="form-group">
                        <label for="deposit-amount">Deposit Amount ($)</label>
                        <input type="number" id="deposit-amount" min="1" placeholder="Enter amount">
                    </div>
                    <button class="btn btn-block" onclick="depositMoney()">Deposit Money</button>
                    
                    <div class="form-group" style="margin-top: 20px;">
                        <label for="withdraw-amount">Withdraw Amount ($)</label>
                        <input type="number" id="withdraw-amount" min="1" placeholder="Enter amount">
                    </div>
                    <button class="btn btn-block" onclick="withdrawMoney()">Withdraw Money</button>
                </div>
            </div>
            
            <div class="interest-status">
                <h3>Interest Status</h3>
                <p id="interest-status">Interest earning is currently inactive.</p>
                <button class="btn" onclick="toggleInterest()" id="interest-toggle">Start Earning Interest</button>
            </div>
        </div>
    </main>

    <footer>
        <p>&copy; 2023 Dream eShop - Virtual Shopping Experience | All purchases are simulated!</p>
    </footer>

    <script src="script.js"></script>
    <script>
        // Initialize data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeData();
            updateBalanceDisplay();
            displayBankInfo();
            
            // Start interest timer if active
            const bankAccount = getBankAccount();
            if (bankAccount.interestActive) {
                startInterestTimer();
            }
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart - Dream eShop</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <div class="navbar">
            <div class="logo">
                <h1>Dream eShop</h1>
            </div>
            <div class="nav-links">
                <a href="index.html">Home</a>
                <a href="cart.html" class="active">Cart</a>
                <a href="orders.html">Orders</a>
                <a href="bank.html">Bank</a>
                
            </div>
            <div class="user-info">
                <span id="balance">Balance: $1,000,000,000</span>
                <input type="text" id="username" placeholder="Enter username" value="User1">
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <h2>Shopping Cart</h2>
            <div id="cart-items">
                <!-- Cart items will be loaded here dynamically -->
            </div>
            <div class="cart-total">
                <h3>Total: $<span id="cart-total">0.00</span></h3>
                <button class="btn btn-success btn-block" id="checkout-btn">Proceed to Checkout</button>
            </div>
        </div>
    </main>

    <footer>
        <p>&copy; 2023 Dream eShop - Virtual Shopping Experience | All purchases are simulated!</p>
    </footer>

    <script src="script.js"></script>
    <script>
        // Initialize data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeData();
            updateBalanceDisplay();
            displayCart();
        });
    </script>
</body>
</html>
